name: Build OnePlus_SukiSU Ultra All
on:
  workflow_dispatch:
    inputs:
      CPU:
        type: choice
        description: "Branch"
        required: true
        default: sm8150
        options:
          - sm7550
          - sm7675
          - sm8150
          - sm8450
          - sm8475
          - sm8550
      FEIL:
        type: string
        description: "FEIL name"
        required: true
        default: SU
      CONFIG:
        type: choice
        description: "Configuration file"
        required: true
        default: oneplus_7pro_v
        options:
          - oneplus_nord_ce4_v
          - oneplus_ace_3v_v
          - oneplus_nord_4_v
          - oneplus_10_pro_v
          - oneplus_10t_v
          - oneplus_11r_v
          - oneplus_ace2_v
          - oneplus_ace_pro_v
          - oneplus_11_v
          - oneplus_12r_v
          - oneplus_ace2pro_v
          - oneplus_ace3_v
          - oneplus_7pro_v  # OnePlus 7 Pro
          - oneplus_open_v
          - oneplus12_v
          - oneplus_13r
          - oneplus_ace3_pro_v
          - oneplus_ace5
          - oneplus_pad2_v
          - oneplus_13
          - oneplus_13t
          - oneplus_ace5_pro
      KERNEL_VERSION:
        type: choice
        description: "Kernel version"
        required: true
        default: "6.1"
        options:
          - "6.1"
          - "6.6"
          - "5.15"
          - "5.10"
      BUILD_METHOD:
        type: choice
        description: "Packaging method"
        required: true
        default: "AnyKernel3"
        options:
          - "AnyKernel3"
          - "TWRP"
env:
  KSUVER: SU
  LINEAGE_KERNEL_REPO: https://github.com/LineageOS/android_kernel_oneplus_sm8150.git
  ANYKERNEL_REPO: https://github.com/osm0sis/AnyKernel3.git
jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout config repo
        uses: actions/checkout@v4

      - name: Clone LineageOS kernel source
        run: |
          git clone --depth=1 ${{ env.LINEAGE_KERNEL_REPO }} kernel_source -b lineage-${{ inputs.KERNEL_VERSION }}

      - name: Clone AnyKernel3
        run: |
          git clone --depth=1 ${{ env.ANYKERNEL_REPO }} AnyKernel3

      - name: Install cross-toolchain and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc bison flex libssl-dev clang gcc-aarch64-linux-gnu git make libelf-dev

      - name: Clone LineageOS DTC tool
        working-directory: kernel_source
        run: |
          git clone --depth=1 https://github.com/LineageOS/android_prebuilts_tools-lineage.git prebuilts/tools-lineage

      - name: Add DTC to PATH
        run: |
          echo "PATH=$(pwd)/kernel_source/prebuilts/tools-lineage/linux-x86/dtc:$PATH" >> $GITHUB_ENV

      - name: Configure build variables
        run: |
          echo "CPU=${{ inputs.CPU }}" >> $GITHUB_ENV
          echo "CONFIG=${{ inputs.CONFIG }}" >> $GITHUB_ENV
          echo "KVER=${{ inputs.KERNEL_VERSION }}" >> $GITHUB_ENV
          echo "METHOD=${{ inputs.BUILD_METHOD }}" >> $GITHUB_ENV
          echo "FEIL=${{ inputs.FEIL }}" >> $GITHUB_ENV

      - name: Build kernel
        working-directory: kernel_source
        env:
          ARCH: arm64
          CROSS_COMPILE: aarch64-linux-gnu-
          CC: clang
          CLANG_TRIPLE: aarch64-linux-gnu-
        run: |
          # Select defconfig
          case "${{ inputs.CONFIG }}" in
            oneplus_7pro_v)
              DEFCONFIG=vendor/sm8150-perf_defconfig ;;
            *)
              DEFCONFIG=vendor/${{ inputs.CONFIG }}_defconfig ;;
          esac

          # Configure
          make O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE CC=$CC CLANG_TRIPLE=$CLANG_TRIPLE $DEFCONFIG

          # Disable problematic features
          scripts/config --file out/.config \
            --disable ARCH_MSM_DT_OVERLAY \
            --disable DTB_OVERLAY \
            --disable LTO \
            --disable LTO_CLANG
            
          make -s O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE CC=$CC CLANG_TRIPLE=$CLANG_TRIPLE olddefconfig

          # Build kernel and DTBs
          make -j$(nproc) O=out ARCH=$ARCH CROSS_COMPILE=$CROSS_COMPILE CC=$CC CLANG_TRIPLE=$CLANG_TRIPLE Image.gz dtbs

      - name: Package kernel
        run: |
          METHOD="${{ inputs.BUILD_METHOD }}"
          FEIL="${{ inputs.FEIL }}"
          CONFIG="${{ inputs.CONFIG }}"
          KVER="${{ inputs.KERNEL_VERSION }}"
          OUTPUT_FILE="kernel-${FEIL}-${CONFIG}-${KVER}.zip"

          mkdir -p output

          if [ "$METHOD" = "AnyKernel3" ]; then
            # Copy kernel and DTBs
            cp kernel_source/out/arch/arm64/boot/Image.gz AnyKernel3/
            mkdir -p AnyKernel3/dtb
            find kernel_source/out/arch/arm64/boot/dts/vendor -name '*.dtb' -exec cp {} AnyKernel3/dtb/ \;
            
            # Create zip
            cd AnyKernel3
            zip -r9 "../output/$OUTPUT_FILE" .
          else
            echo "TWRP packaging not implemented" >&2
            # Create empty artifact to prevent workflow failure
            touch output/placeholder.txt
          fi

      - name: Upload kernel artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ inputs.FEIL }}
          path: output/
          retention-days: 3